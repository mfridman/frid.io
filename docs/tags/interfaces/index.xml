<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Interfaces on frid.io</title>
    <link>https://mfridman.github.com/frid.io/tags/interfaces/</link>
    <description>Recent content in Interfaces on frid.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 05 Feb 2018 20:07:41 -0500</lastBuildDate>
    
	<atom:link href="https://mfridman.github.com/frid.io/tags/interfaces/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Shine on You Crazy Interface - #golang part1</title>
      <link>https://mfridman.github.com/frid.io/golang/shine-on-you-crazy-interface/</link>
      <pubDate>Mon, 05 Feb 2018 20:07:41 -0500</pubDate>
      
      <guid>https://mfridman.github.com/frid.io/golang/shine-on-you-crazy-interface/</guid>
      <description>Go&amp;rsquo;s interfaces are brilliant. It&amp;rsquo;s not immediately apparent and at first can be confusing, but after a while its brilliance shines through.
Simply understand that if a concrete type posses all necessary methods it, the concrete type, can implicitly satisfy an interface.
In Go, interfaces are considered abstract types, meaning we do not know what an interface really is, only what it can do.
The Go standard library makes use of interfaces, let&amp;rsquo;s take a look at an example.</description>
    </item>
    
  </channel>
</rss>