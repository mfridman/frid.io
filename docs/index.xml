<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>frid.io</title>
    <link>https://frid.io/</link>
    <description>Recent content on frid.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 29 Jul 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://frid.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Integrating Go modules with Drone CI</title>
      <link>https://frid.io/golang/go-modules-part3/</link>
      <pubDate>Sun, 29 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://frid.io/golang/go-modules-part3/</guid>
      <description>Go modules: part 1, part 2, part 3  coming soon&amp;hellip;
for now you can check out their site drone.io and blog
 Vendor is tailored for the dependencies of a specific module, not warming a cache. ðŸ¤” from issue#26610
 For CI/CD this may be useful, cl#126656
 and maybe issue#24250
  This section will be removed eventually Implementation deviations from the initial proposal and worthy highlights:</description>
    </item>
    
    <item>
      <title>Welcome, Go modules - part2</title>
      <link>https://frid.io/golang/go-modules-part2/</link>
      <pubDate>Thu, 26 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://frid.io/golang/go-modules-part2/</guid>
      <description>Go modules: part 1, part 2, part 3   Go module
 GOPATH mode vs module-aware mode
 go.mod file
 Day-to-day commands
 upgrading
 downgrading
 excluding version
 remove exclusion
 replace
 dropping replacement
 updating and patching
 Advanced commands
   Go module A go module is a collection of related Go packages. A single unit that defines the minimum requirements that must be satisfied by their dependencies.</description>
    </item>
    
    <item>
      <title>Welcome, Go modules - part1</title>
      <link>https://frid.io/golang/go-modules-part1/</link>
      <pubDate>Fri, 20 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://frid.io/golang/go-modules-part1/</guid>
      <description>Go modules: part 1, part 2, part 3  For those strictly interested in what is it and how do I use it? head over to part2.
I&amp;rsquo;ll skip majority of the historic bits and add a timeline for context. The path towards Go modules&amp;hellip;
  Makefiles pre-1.0  In the beginning, there were Makefiles such as these, scripts, maybe a ðŸ§™ and lots of 
          GOPATH 1.</description>
    </item>
    
    <item>
      <title>Upspin part 5: Advanced tips and tricks [WIP]</title>
      <link>https://frid.io/blog/upspin-part-5/</link>
      <pubDate>Sun, 08 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://frid.io/blog/upspin-part-5/</guid>
      <description>Please note: this is a work in progress and some items below may change without notice  FUSE daemon, upspinfs and cacheserver
 I lost my Domain keys, now what?
  FUSE daemon, upspinfs and cacheserver The bread and butter of Upspin is being able to bring your remote data into the local namespace, so those items look and feel as if they are part of the local file tree.</description>
    </item>
    
    <item>
      <title>Upspin part 3: Configuring an Upspin server [WIP]</title>
      <link>https://frid.io/blog/upspin-part-3/</link>
      <pubDate>Sat, 07 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://frid.io/blog/upspin-part-3/</guid>
      <description>Please note: this is a work in progress and some items below may change without notice  Intro
 Prerequisites
 Tell Upspin about your host name
 Configure a custom domain
 Setup a static IP
 Create a DNS record
 Build upspinserver binary with Go
 Install Go on 64-bit x86 on Linux
 Build upspinserver binary
  Configure upspinserver on Ubuntu 18.04
 Test your installation</description>
    </item>
    
    <item>
      <title>Upspin part 2: Configuring an Upspin user</title>
      <link>https://frid.io/blog/upspin-part-2/</link>
      <pubDate>Mon, 18 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://frid.io/blog/upspin-part-2/</guid>
      <description>Intro
 Installing the tools
 1 - Download binaries directly
 2 - Use Go to pull and build
  Creating a user
 Testing your user
  Intro To access data within the Upspin world one does not require a directory or storage server. Think of yourself as a client, i.e., a user, that was granted access to another user&amp;rsquo;s data.
For the sake of this tutorial I&amp;rsquo;ll be hosting a publicly accessible file that any Upspin user can access.</description>
    </item>
    
    <item>
      <title>A mongoDB Go Driver - by the mongoDB folks</title>
      <link>https://frid.io/golang/a-new-mongodb-go-driver/</link>
      <pubDate>Thu, 22 Feb 2018 17:36:50 -0500</pubDate>
      
      <guid>https://frid.io/golang/a-new-mongodb-go-driver/</guid>
      <description>So this is exciting, the mongoDB team is working on an official mongoDB Go driver. The official announcement can be found at MongoDB Go Driver Alpha 1 released
For those interested why mongoDB chose to write a driver from the ground-up as apposed to forking mgo read their engineering blog
The repo can be found on github mongo-go-drive and bug reports should be filed over on jira.mongodb.org
I&amp;rsquo;ve been wanting to give mongoDB a fair shot, and now seems to be the right time.</description>
    </item>
    
    <item>
      <title>Shine on You Crazy Interface - part2</title>
      <link>https://frid.io/golang/shine-on-you-crazy-interface2/</link>
      <pubDate>Mon, 05 Feb 2018 20:07:41 -0500</pubDate>
      
      <guid>https://frid.io/golang/shine-on-you-crazy-interface2/</guid>
      <description>No interface discussion is complete without talking about the fmt.Stringer interface. This is a classic when introducing the topic of interfaces.
Notice in part1 we actually made use of this interface to format the songs type.
func (s songs) String() string { var ss []string for i := range s { ss = append(ss, s[i].name+&#34; &#34;+fmt.Sprint(s[i].release.Year())) } return strings.Join(ss, &#34;, &#34;) }  When we called a print function the output was nicely formatted:</description>
    </item>
    
    <item>
      <title>Shine on You Crazy Interface - part1</title>
      <link>https://frid.io/golang/shine-on-you-crazy-interface/</link>
      <pubDate>Sun, 04 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://frid.io/golang/shine-on-you-crazy-interface/</guid>
      <description>Go&amp;rsquo;s interfaces are brilliant. It&amp;rsquo;s not immediately apparent and at first can be confusing, but after a while its brilliance shines through.
Simply understand that if a concrete type posses all necessary methods it, the concrete type, can implicitly satisfy an interface.
In Go, interfaces are considered abstract types, meaning we do not know what an interface really is, only what it can do.
The Go standard library makes use of interfaces, let&amp;rsquo;s take a look at an example.</description>
    </item>
    
    <item>
      <title>To err, or not to err</title>
      <link>https://frid.io/golang/err-thoughts/</link>
      <pubDate>Mon, 29 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://frid.io/golang/err-thoughts/</guid>
      <description>Draft in progress..
Much of this will be based on Error handling in Upspin.
Not suitable for all projects, but interesting enough for further discussion and thought.</description>
    </item>
    
    <item>
      <title>Year End 2017</title>
      <link>https://frid.io/blog/year-end-2017/</link>
      <pubDate>Sun, 24 Dec 2017 21:04:50 -0500</pubDate>
      
      <guid>https://frid.io/blog/year-end-2017/</guid>
      <description>I don&amp;rsquo;t care much for &amp;ldquo;annual&amp;rdquo; events, i.e., taking action x because y rotations around the sun. But, I do believe in allocating time aside for reflecting and setting future goals. It just so happens that time is now, and now is end-of-year.
The meetup game in Toronto continues to be strong. Lots of interesting folks. Meetups I try regularly attend: DC416, Docker-Toronto, Go-Toronto.
A few members of DC416 and I started playing as a Team capturing digital flags.</description>
    </item>
    
    <item>
      <title>Upspin part 1: My $HOME</title>
      <link>https://frid.io/blog/upspin-part-1/</link>
      <pubDate>Mon, 25 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://frid.io/blog/upspin-part-1/</guid>
      <description>Background For some time I imagined a world where all I&amp;rsquo;d need to access my data was something, be it a laptop, cellphone or embedded microchip, that would authenticate me and grant access to all data available to me. In this world I could bring said authentication anywhere, e.g., a library or Chiba City, and start accessing data with whatever tools available. Imagine a keyboard, mouse and monitor at the library or tablet at an airport.</description>
    </item>
    
    <item>
      <title>From Jekyll to Hugo</title>
      <link>https://frid.io/blog/from-jekyll-to-hugo/</link>
      <pubDate>Sun, 17 Dec 2017 00:52:08 -0500</pubDate>
      
      <guid>https://frid.io/blog/from-jekyll-to-hugo/</guid>
      <description>Done and Launched.
Still a work in progress [WIP], but here we are.
To start local server: hugo server -D --disableFastRender
link
Really liking Hugo so far!
To link a page within the site, e.g., part 2</description>
    </item>
    
    <item>
      <title>Validating host keys in Go&#39;s ssh package</title>
      <link>https://frid.io/golang/go-ssh-hostkey/</link>
      <pubDate>Mon, 04 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://frid.io/golang/go-ssh-hostkey/</guid>
      <description>So you upgraded the package: go get -u -v golang.org/x/crypto/...
and got an error: ssh: must specify HostKeyCallback
A quick google search returns this great post Golang SSH Security, as well as issue#19767 and e4e2799.
Briefly, prior to the patch users could omit ssh.HostKeyCallback from ssh.ClientConfig, allowing SSH connections to bypass host key checking and &amp;ldquo;just work&amp;rdquo;.
Given the onus is on the client to verify the identity of the host, this was a step in the right direction in terms of security.</description>
    </item>
    
    <item>
      <title>mindreader</title>
      <link>https://frid.io/ctf/google-2017/mindreader/</link>
      <pubDate>Fri, 23 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://frid.io/ctf/google-2017/mindreader/</guid>
      <description>2017 was a tough one. Nonetheless, big thanks to  for hosting an event.
Challenge: Can you read my mind? No hints.
All you get is an input box:
Checking the page source doesn&amp;rsquo;t reveal anything fruitful. In hindsight the name=&amp;quot;f&amp;quot; may have been a clue, but it&amp;rsquo;s subtle. (spoiler: f for file)
1 2 3 4 5 6 7 8 9 10 11  &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;p&amp;gt;Hello, what do you want to read?</description>
    </item>
    
    <item>
      <title>Generate GPG key, add to GitHub and verify identity</title>
      <link>https://frid.io/blog/gpg-and-all-that/</link>
      <pubDate>Sat, 17 Jun 2017 00:11:24 -0500</pubDate>
      
      <guid>https://frid.io/blog/gpg-and-all-that/</guid>
      <description>But why? GPG signature verification
A few gotchas.
 Make sure to verify the email addresses associated with your GPG key.
 Don&amp;rsquo;t forget to add said email(s) to your .gitconfig file.
e.g., git config --global user.email &amp;quot;email@example.com&amp;quot; (global setting)
 Download GPG suite, which will enable adding key(s) to the macOS keychain.
  Before proceeding, please check for existing keys and make backups!!!
To list keys in secret keyring run: gpg --list-secret-keys.</description>
    </item>
    
    <item>
      <title>Echo</title>
      <link>https://frid.io/ctf/plaid-2017/echo/</link>
      <pubDate>Mon, 24 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://frid.io/ctf/plaid-2017/echo/</guid>
      <description>Challenge: If you hear enough, you may hear the whispers of a key&amp;hellip;
If you see app.py well enough, you will notice the UI sucks&amp;hellip;
No hints.
PPP (plaid parliament of pwning) puts on one of the best online Jeopardy CTFs. I wish I had more time that weekend (runs for 48hrs only) and a full team, either way I decided to give it a go.
Disclaimer, was not solved within the allotted time.</description>
    </item>
    
    <item>
      <title>Little School Bus</title>
      <link>https://frid.io/ctf/pico-2017/little-schoolbus/</link>
      <pubDate>Fri, 14 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://frid.io/ctf/pico-2017/little-schoolbus/</guid>
      <description>Had a blast participating with a few local DC416 folks in the 2017 picoCTF!
Challenge: Can you help me find the data in this littleschoolbus.bmp?
Hint: Look at least significant bit (LSB) encoding!!
In retrospect the solution was fairly straightforward, but, tunnel vision got the best of me. Thankfully in the end I ended up learning quite a bit about steganography and LSB. (disclaimer, it was actually solved by a teammate)</description>
    </item>
    
    <item>
      <title>No Eyes</title>
      <link>https://frid.io/ctf/pico-2017/no-eyes/</link>
      <pubDate>Fri, 14 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://frid.io/ctf/pico-2017/no-eyes/</guid>
      <description>Challenge: The website isn&amp;rsquo;t really me much, but you can still get the admin password, right?
Hint: Sometimes an error message can be just as useful
This one was really rewarding.
So, the landing page looked like this:
Based on the description we assume the username is admin so let&amp;rsquo;s focus on the password field.
Entering a single quote results in an error, great, there is a problem with the query, we know the syntax and it appears to be injectable.</description>
    </item>
    
    <item>
      <title>coffee</title>
      <link>https://frid.io/ctf/pico-2017/coffee/</link>
      <pubDate>Fri, 14 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://frid.io/ctf/pico-2017/coffee/</guid>
      <description>Challenge: You found a suspicious USB drive in a jar of pickles. It contains this file
$ file freeThePickles.class freeThePickles.class: compiled Java class data, version 52.0 (Java 1.8) Hint: Is there a way to get the source of the program?
Although this challenge didn&amp;rsquo;t call for it, if you want to disassemble a class file use javap like so&amp;hellip;
javap -verbose freeThePickles.class &amp;gt; freeThePickles
Anyways, back to the challenge. I used a &amp;ldquo;cloud-based&amp;rdquo; decompiler, javadecompilers.</description>
    </item>
    
    <item>
      <title>Channel your inner communication, little goroutines</title>
      <link>https://frid.io/golang/goroutine-patterns/</link>
      <pubDate>Fri, 02 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://frid.io/golang/goroutine-patterns/</guid>
      <description>Below are some patterns and ideas I&amp;rsquo;ve come across wrt channels and goroutines. Just remember&amp;hellip;
...if you reach into your toolbox and decide to use goroutines always ask: how  and when  will those goroutines stop  This section will likely be split off into more specific posts in the future.
limit number of working goroutines with buffered channels Often times you don&amp;rsquo;t need thousands of goroutines working at once, especially true when communicating with external resources, e.</description>
    </item>
    
    <item>
      <title>Dealing with files in Go</title>
      <link>https://frid.io/golang/working-with-files/</link>
      <pubDate>Mon, 21 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://frid.io/golang/working-with-files/</guid>
      <description>File existence Useful when you want to have consistency checking file existence, with a bit more granularity.
func exists(file string) (bool, error) { _, err := os.Stat(file) // stat success, file exists, exit early if err == nil { return true, nil } // check for an os.ErrNotExist, &#34;file does not exist&#34;. Return false and no errors. if os.IsNotExist(err) { return false, nil } // error from stat return false, err }  Used as follows:</description>
    </item>
    
    <item>
      <title>Go, from around the web</title>
      <link>https://frid.io/around_the_web/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://frid.io/around_the_web/</guid>
      <description>This page lists, in no particular order, awesome Go content from around the web. Big thanks to the original creators for their time and contribution(s).
In due time I&amp;rsquo;d like to:
 add tags to the content below
 automate syncing Go-related articles from my Pocket account
 add a section highlighting notable corners of the internet, i.e., folks and orgs who have a tonne of great Go content
  Some items are marked with , these are just my favorites.</description>
    </item>
    
    <item>
      <title>My Go notes</title>
      <link>https://frid.io/my_notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://frid.io/my_notes/</guid>
      <description>Slowly migrating commonly used items and internal notes to this space&amp;hellip;
Upgrade Go version (Mac)  Always be wary of things you find on the internet that use a combination of wget, tar and sudo.
Go downloads
# remove old version sudo rm -rf /usr/local/go # download a Go version, redirect output to stdout (quietly), pipe into tar and print version wget -qO- https://dl.google.com/go/go1.5.2.darwin-amd64.tar.gz | sudo tar -C /usr/local -xz &amp;&amp; go version # go version go1.</description>
    </item>
    
  </channel>
</rss>