<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>frid.io</title>
    <link>https://mfridman.github.com/frid.io/</link>
    <description>Recent content on frid.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 24 Dec 2017 21:04:50 -0500</lastBuildDate>
    
	<atom:link href="https://mfridman.github.com/frid.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Year End 2017</title>
      <link>https://mfridman.github.com/frid.io/blog/year-end-2017/</link>
      <pubDate>Sun, 24 Dec 2017 21:04:50 -0500</pubDate>
      
      <guid>https://mfridman.github.com/frid.io/blog/year-end-2017/</guid>
      <description>I don&amp;rsquo;t care much for &amp;ldquo;annual&amp;rdquo; events, i.e., taking action x because y rotations around the sun. But, I do believe in allocating time aside for reflecting and setting future goals. It just so happens that time is now, and now is end-of-year.
The meetup game in Toronto continues to be strong. Lots of interesting folks. Meetups I try regularly attend: DC416, Docker-Toronto, Go-Toronto.
A few members of DC416 and I started playing as a Team capturing digital flags.</description>
    </item>
    
    <item>
      <title>From Jekyll to Hugo</title>
      <link>https://mfridman.github.com/frid.io/blog/from-jekyll-to-hugo/</link>
      <pubDate>Sun, 17 Dec 2017 00:52:08 -0500</pubDate>
      
      <guid>https://mfridman.github.com/frid.io/blog/from-jekyll-to-hugo/</guid>
      <description>Done and Launched.
Still work in progress (WIP), but here we are.</description>
    </item>
    
    <item>
      <title>Validating host keys in Go&#39;s ssh package</title>
      <link>https://mfridman.github.com/frid.io/golang/go-ssh-hostkey/</link>
      <pubDate>Mon, 04 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mfridman.github.com/frid.io/golang/go-ssh-hostkey/</guid>
      <description>So you upgraded the package: go get -u -v golang.org/x/crypto/...
and got an error: ssh: must specify HostKeyCallback
A quick google search returns this great post Golang SSH Security, as well as issue#19767 and e4e2799.
Briefly, prior to the patch users could omit HostKeyCallback from ClientConfig, allowing SSH connections to bypass host key checking and &amp;ldquo;just work&amp;rdquo;.
Given the onus is on the client to verify the identity of the host, this was a step in the right direction in terms of security.</description>
    </item>
    
    <item>
      <title>mindreader</title>
      <link>https://mfridman.github.com/frid.io/ctf/google-2017/mindreader/</link>
      <pubDate>Fri, 23 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mfridman.github.com/frid.io/ctf/google-2017/mindreader/</guid>
      <description>2017 was a tough one. Nonetheless, big thanks to  for hosting an event.
Challenge: Can you read my mind? No hints.
All you get is an input box:
Checking the page source doesn&amp;rsquo;t reveal anything fruitful. In hindsight the name=&amp;quot;f&amp;quot; may have been a clue, but it&amp;rsquo;s subtle. (spoiler: f for file)
1234567891011 &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;p&amp;gt;Hello, what do you want to read?&amp;lt;/p&amp;gt; &amp;lt;form method=&amp;#34;GET&amp;#34;&amp;gt; &amp;lt;input type=&amp;#34;txt&amp;#34; name=&amp;#34;f&amp;#34;&amp;gt; &amp;lt;input type=&amp;#34;submit&amp;#34; value=&amp;#34;Read&amp;#34;&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;</description>
    </item>
    
    <item>
      <title>Echo</title>
      <link>https://mfridman.github.com/frid.io/ctf/plaid-2017/echo/</link>
      <pubDate>Mon, 24 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mfridman.github.com/frid.io/ctf/plaid-2017/echo/</guid>
      <description>Challenge: If you hear enough, you may hear the whispers of a key&amp;hellip;
If you see app.py well enough, you will notice the UI sucks&amp;hellip;
No hints.
PPP (plaid parliament of pwning) puts on one of the best online Jeopardy CTFs. I wish I had more time that weekend (runs for 48hrs only) and a full team, either way I decided to give it a go.
Disclaimer, was not solved within the allotted time.</description>
    </item>
    
    <item>
      <title>Little School Bus</title>
      <link>https://mfridman.github.com/frid.io/ctf/pico-2017/little-schoolbus/</link>
      <pubDate>Fri, 14 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mfridman.github.com/frid.io/ctf/pico-2017/little-schoolbus/</guid>
      <description>Had a blast participating with a few local DC416 folks in the 2017 picoCTF!
Challenge: Can you help me find the data in this littleschoolbus.bmp?
Hint: Look at least significant bit (LSB) encoding!!
In retrospect the solution was fairly straightforward, but, tunnel vision got the best of me. Thankfully in the end I ended up learning quite a bit about steganography and LSB. (disclaimer, it was actually solved by a teammate)</description>
    </item>
    
    <item>
      <title>No Eyes</title>
      <link>https://mfridman.github.com/frid.io/ctf/pico-2017/no-eyes/</link>
      <pubDate>Fri, 14 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mfridman.github.com/frid.io/ctf/pico-2017/no-eyes/</guid>
      <description>Challenge: The website isn&amp;rsquo;t really me much, but you can still get the admin password, right?
Hint: Sometimes an error message can be just as useful
This one was really rewarding.
So, the landing page looked like this:
Based on the description we assume the username is admin so let&amp;rsquo;s focus on the password field.
Entering a single quote results in an error, great, there is a problem with the query, we know the syntax and it appears to be injectable.</description>
    </item>
    
    <item>
      <title>coffee</title>
      <link>https://mfridman.github.com/frid.io/ctf/pico-2017/coffee/</link>
      <pubDate>Fri, 14 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mfridman.github.com/frid.io/ctf/pico-2017/coffee/</guid>
      <description>Challenge: You found a suspicious USB drive in a jar of pickles. It contains this file
$ file freeThePickles.class freeThePickles.class: compiled Java class data, version 52.0 (Java 1.8) Hint: Is there a way to get the source of the program?
Although this challenge didn&amp;rsquo;t call for it, if you want to disassemble a class file use javap like so&amp;hellip;
javap -verbose freeThePickles.class &amp;gt; freeThePickles
Anyways, back to the challenge. I used a &amp;ldquo;cloud-based&amp;rdquo; decompiler, javadecompilers.</description>
    </item>
    
  </channel>
</rss>